{"version":3,"sources":["components/Notification.js","services/persons.js","App.js","index.js"],"names":["Notification","message","type","notificationStyle","color","style","className","baseUrl","services","getAll","axios","get","then","response","data","create","newPerson","post","update","id","put","remove","delete","Filter","name","onChange","value","PersonForm","onSubmit","onChangeName","number","onChangeNumber","Persons","persons","onClick","map","person","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","filterName","setFilterName","notification","setNotification","notificationType","setType","useEffect","personService","initialPersons","personsToShow","filter","toLowerCase","includes","event","target","preventDefault","window","confirm","find","p","returnedPerson","setTimeout","catch","error","status","concat","alert","_","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ca47b042.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Notification = ({ message, type }) => {\r\n    if (message === null) {\r\n        return null;\r\n    }\r\n\r\n    const notificationStyle =\r\n        type === \"error\" ? { color: \"red\" } : { color: \"green\" };\r\n\r\n    return (\r\n        <div style={notificationStyle} className=\"notification\">\r\n            {message}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Notification;\r\n","import axios from \"axios\";\r\n\r\nconst baseUrl = \"/api/persons\";\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl);\r\n    return request.then((response) => response.data);\r\n};\r\n\r\nconst create = (newPerson) => {\r\n    const request = axios.post(baseUrl, newPerson);\r\n    return request.then((response) => response.data);\r\n};\r\n\r\nconst update = (id, newPerson) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newPerson);\r\n    return request.then((response) => response.data);\r\n};\r\n\r\nconst remove = (id) => {\r\n    return axios.delete(`${baseUrl}/${id}`);\r\n};\r\n\r\nconst services = { getAll, create, update, remove };\r\nexport default services;\r\n","import React, { useState, useEffect } from \"react\";\nimport Notification from \"./components/Notification\";\nimport personService from \"./services/persons\";\n\nconst Filter = ({ name, onChange }) => (\n    <div>\n        filter show with <input value={name} onChange={onChange} />\n    </div>\n);\n\nconst PersonForm = ({\n    onSubmit,\n    name,\n    onChangeName,\n    number,\n    onChangeNumber,\n}) => (\n    <form onSubmit={onSubmit}>\n        <div>\n            name: <input value={name} onChange={onChangeName} />\n        </div>\n        <div>\n            number: <input value={number} onChange={onChangeNumber} />\n        </div>\n        <div>\n            <button type=\"submit\">add</button>\n        </div>\n    </form>\n);\n\nconst Persons = ({ persons, onClick }) => (\n    <>\n        {persons.map((person) => (\n            <div key={person.id}>\n                {person.name} {person.number}{\" \"}\n                <button onClick={onClick(person)}>delete</button>\n            </div>\n        ))}\n    </>\n);\n\nconst App = () => {\n    const [persons, setPersons] = useState([]);\n    const [newName, setNewName] = useState(\"\");\n    const [newNumber, setNewNumber] = useState(\"\");\n    const [filterName, setFilterName] = useState(\"\");\n    const [notification, setNotification] = useState(null);\n    const [notificationType, setType] = useState(null);\n\n    useEffect(() => {\n        personService\n            .getAll()\n            .then((initialPersons) => setPersons(initialPersons));\n    }, []);\n\n    const personsToShow = !filterName\n        ? persons\n        : persons.filter((person) =>\n              person.name.toLowerCase().includes(filterName)\n          );\n\n    const addNumber = (event) => {\n        event.preventDefault();\n\n        if (!newName || !newNumber) {\n            !newName\n                ? alert(\"name must not be empty\")\n                : alert(\"number must not be empty\");\n        } else if (persons.map((person) => person.name).includes(newName)) {\n            if (\n                window.confirm(\n                    `${newName} is already added to phonebook, replace the old number with a new one?`\n                )\n            ) {\n                const person = persons.find((p) => p.name === newName);\n                const newPerson = { ...person, number: newNumber };\n                personService\n                    .update(person.id, newPerson)\n                    .then((returnedPerson) => {\n                        setNotification(\n                            `${returnedPerson.name} number changed`\n                        );\n                        setType(\"notification\");\n                        setPersons(\n                            persons.map((person) =>\n                                person.name !== newName\n                                    ? person\n                                    : returnedPerson\n                            )\n                        );\n                        setNewName(\"\");\n                        setNewNumber(\"\");\n\n                        setTimeout(() => {\n                            setNotification(null);\n                            setType(null);\n                        }, 3000);\n                    })\n                    .catch((error) => {\n                        if (error.response.status === 404) {\n                            setNotification(\n                                `Information of ${person.name} has already been removed from the server`\n                            );\n                            setPersons(persons.filter((p) => p.id !== person.id));\n                        } else if (error.response.status === 400) {\n                            setNotification(error.response.data.error);\n                        }\n                        \n                        setType(\"error\");\n                        setNewName(\"\");\n                        setNewNumber(\"\");\n\n                        setTimeout(() => {\n                            setNotification(null);\n                            setType(null);\n                        }, 3000);\n                    });\n            }\n        } else {\n            const newPerson = {\n                name: newName,\n                number: newNumber,\n            };\n\n            personService\n                .create(newPerson)\n                .then((returnedPerson) => {\n                    setNotification(`Added ${returnedPerson.name}`);\n                    setType(\"notification\");\n                    setPersons(persons.concat(returnedPerson));\n                    setNewName(\"\");\n                    setNewNumber(\"\");\n\n                    setTimeout(() => {\n                        setNotification(null);\n                        setType(null);\n                    }, 3000);\n                })\n                .catch((error) => {\n                    setNotification(error.response.data.error);\n                    setType(\"error\");\n                    setNewName(\"\");\n                    setNewNumber(\"\");\n\n                    setTimeout(() => {\n                        setNotification(null);\n                        setType(null);\n                    }, 3000);\n                });\n        }\n    };\n\n    const handleNameChange = (event) => {\n        setNewName(event.target.value);\n    };\n\n    const handleNumberChange = (event) => {\n        setNewNumber(event.target.value);\n    };\n\n    const handleFilterName = (event) => {\n        setFilterName(event.target.value.toLowerCase());\n    };\n\n    const deleteUser = ({ name, id }) => {\n        return () => {\n            if (window.confirm(`Delete ${name} ?`)) {\n                personService.remove(id).then((_) => {\n                    setPersons(persons.filter((person) => person.id !== id));\n                });\n            }\n        };\n    };\n\n    return (\n        <div>\n            <h2>Phonebook</h2>\n            <Notification message={notification} type={notificationType} />\n            <Filter name={filterName} onChange={handleFilterName} />\n\n            <h3>Add a new</h3>\n\n            <PersonForm\n                onSubmit={addNumber}\n                name={newName}\n                onChangeName={handleNameChange}\n                number={newNumber}\n                onChangeNumber={handleNumberChange}\n            />\n\n            <h3>Numbers</h3>\n\n            <Persons persons={personsToShow} onClick={deleteUser} />\n        </div>\n    );\n};\n\nexport default App;\n","import ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}